#version 110

varying vec2 uv;

uniform sampler2D color_texture;
uniform sampler2D normal_texture;
uniform sampler2D mask_texture;

void normal_shader(void)
{
	// Extract the normal from the normal map  
	vec3 normal = normalize(texture2D(normal_texture, uv).rgb * 2.0 - 1.0);  
	  
	// Determine where the light is positioned (this can be set however you like)  
	vec3 light_pos = normalize(vec3(0.5, 0.5, 1.5));  
	  
	// Calculate the lighting diffuse value  
	float diffuse = max(dot(normal, light_pos), 0.0);  
	  
	vec3 color = diffuse * gl_FragColor.rgb;  
	float intensity = 2.5;
	  
	// Set the output color of our current pixel  
	gl_FragColor = intensity * vec4(color, 1.0);
}

void alpha_shader(void)
{
	vec4 skinColor = vec4(0.90, 0.74, 0.60, 1.0);
	vec4 skinVec = vec4(gl_FragColor.xyz*skinColor.xyz*texture2D(mask_texture,uv).a,1.0);
	vec4 garmentVec = vec4(gl_FragColor.xyz*(1.0 - texture2D(mask_texture,uv).a),1.0);
	gl_FragColor = skinVec + garmentVec;
}

void main(void)
{
	gl_FragColor = texture2D(color_texture, uv);
	normal_shader();
    alpha_shader();
}
