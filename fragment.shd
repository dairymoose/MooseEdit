#version 110

varying vec2 uv;

uniform mat4 WorldMatrix;
uniform mat4 global_ModelView;
uniform mat4 global_Projection;

uniform sampler2D Texture2DParameter_DM;
uniform sampler2D Texture2DParameter_NM;
uniform sampler2D Texture2DParameter_SM;
uniform vec4 skinColor;
uniform vec4 backColor;

uniform float useForeColor;
uniform float useBackColor;

vec4 AmbientColor = vec4(1.0, 1.0, 1.0, 1.0);
float AmbientIntensity = 0.3;

vec3 DiffuseLightDirection = vec3(1.0, 0.0, 0.0);
vec4 DiffuseColor = vec4(1.0, 1.0, 1.0, 1.0);
float DiffuseIntensity = 1.0;

float Shininess = 200.0;
vec4 SpecularColor = vec4(1.0, 1.0, 1.0, 1.0);
float SpecularIntensity = 1.0;
vec3 ViewVector = vec3(1.0, 0.0, 0.0);

float BumpConstant = 2.0;

varying vec3 vTangent;
varying vec3 vBinormal;

varying vec3 n;

void normal_shader4(void)
{
	// Extract the normal from the normal map  
	vec3 normal = normalize(2.0 * (texture2D(Texture2DParameter_NM, uv).rgb * 2.0 - 1.0));
	normal = normalize(normal + vTangent + vBinormal);
	  
	// Determine where the light is positioned (this can be set however you like)  
	vec3 light_pos = normalize(vec3(0.5, 0.5, 1.5));
	  
	// Calculate the lighting diffuse value  
	float diffuse = max(dot(normal, light_pos), 0.0);  
	  
	vec3 color = diffuse * gl_FragColor.rgb;  
	float intensity = 2.5;
	  
	// Set the output color of our current pixel  
	gl_FragColor = intensity * vec4(color, 1.0);
}

void normal_shader(void)
{
	// Extract the normal from the normal map  
	vec3 normal = normalize(2.0 * (texture2D(Texture2DParameter_NM, uv).rgb * 2.0 - 1.0));
	  
	// Determine where the light is positioned (this can be set however you like)  
	vec3 light_pos = normalize(vec3(0.5, 0.5, 1.5));
	  
	// Calculate the lighting diffuse value  
	float diffuse = max(dot(normal, light_pos), 0.0);  
	  
	vec3 color = diffuse * gl_FragColor.rgb;  
	float intensity = 2.5;
	  
	// Set the output color of our current pixel  
	gl_FragColor = intensity * vec4(color, 1.0);
}

void alpha_shader(void)
{
	vec4 foreColor = skinColor;
	vec4 skinVec;
	if (useForeColor > 0.5)
		skinVec = vec4(gl_FragColor.xyz*foreColor.xyz*texture2D(Texture2DParameter_SM,uv).a,1.0);
	else
		skinVec = gl_FragColor*texture2D(Texture2DParameter_SM,uv).a;
	vec4 garmentVec;
	if (useBackColor > 0.5)
		garmentVec = gl_FragColor * backColor * (1.0 - texture2D(Texture2DParameter_SM,uv).a);
	else
		garmentVec = vec4(gl_FragColor.xyz*(1.0 - texture2D(Texture2DParameter_SM,uv).a),1.0);
	gl_FragColor = skinVec + garmentVec;
}

void normal_shader2() {
	// Calculate the normal, including the information in the bump map
    vec3 bump = BumpConstant * (texture2D(Texture2DParameter_NM, uv).xyz - (0.5, 0.5, 0.5));
    vec3 bumpNormal = n + (bump.x * vTangent + bump.y * vBinormal);
    bumpNormal = normalize(bumpNormal);

    // Calculate the diffuse light component with the bump map normal
    float diffuseIntensity = dot(normalize(DiffuseLightDirection), bumpNormal);
    if(diffuseIntensity < 0.0)
        diffuseIntensity = 0.0;

    // Calculate the specular light component with the bump map normal
    vec3 light = normalize(DiffuseLightDirection);
    vec3 r = normalize(2.0 * dot(light, bumpNormal) * bumpNormal - light);
    vec3 v = normalize(ViewVector); //wut
    float dotProduct = dot(r, v);

    vec4 specular = SpecularIntensity * SpecularColor * max(pow(dotProduct, Shininess), 0.0) * diffuseIntensity;

    // Calculate the texture color
    vec4 textureColor = texture2D(Texture2DParameter_DM, uv);
    textureColor.a = 1.0;

    // Combine all of these values into one (including the ambient light)
    gl_FragColor = clamp(textureColor * (diffuseIntensity) + AmbientColor * AmbientIntensity + specular, 0.0, 1.0);
}

varying vec3 Position_cameraspace;
varying vec3 EyeDirection_cameraspace;
varying vec3 LightDirection_cameraspace;

varying vec3 LightDirection_tangentspace;
varying vec3 EyeDirection_tangentspace;

void normal_shader3() {
	vec3 light_pos = normalize(vec3(0.5, 0.5, 1.5));

	// Light emission properties
	// You probably want to put them as uniforms
	vec3 LightColor = vec3(1.0,1.0,1.0);
	float LightPower = 9000.0;
	
	// Material properties
	vec3 MaterialDiffuseColor = texture2D( Texture2DParameter_DM, uv ).rgb;
	vec3 MaterialAmbientColor = vec3(0.1,0.1,0.1) * MaterialDiffuseColor;
	vec3 MaterialSpecularColor = texture2D( Texture2DParameter_SM, uv ).rgb * 0.3;

	// Local normal, in tangent space. V tex coordinate is inverted because normal map is in TGA (not in DDS) for better quality
	vec3 TextureNormal_tangentspace = normalize(texture2D( Texture2DParameter_NM, vec2(uv.x,-uv.y) ).rgb*2.0 - 1.0);
	
	vec3 light_pos_cameraspace = (global_ModelView * vec4(light_pos,1)).xyz;
	// Distance to the light
	float distance = length( light_pos_cameraspace - Position_cameraspace );

	// Normal of the computed fragment, in camera space
	vec3 n = TextureNormal_tangentspace;
	// Direction of the light (from the fragment to the light)
	vec3 l = normalize(LightDirection_tangentspace);
	// Cosine of the angle between the normal and the light direction, 
	// clamped above 0
	//  - light is at the vertical of the triangle -> 1
	//  - light is perpendicular to the triangle -> 0
	//  - light is behind the triangle -> 0
	float cosTheta = clamp( dot( n,l ), 0.0,1.0 );

	// Eye vector (towards the camera)
	vec3 E = normalize(EyeDirection_tangentspace);
	// Direction in which the triangle reflects the light
	vec3 R = reflect(-l,n);
	// Cosine of the angle between the Eye vector and the Reflect vector,
	// clamped to 0
	//  - Looking into the reflection -> 1
	//  - Looking elsewhere -> < 1
	float cosAlpha = clamp( dot( E,R ), 0.0,1.0 );
	
	gl_FragColor = vec4(
		// Ambient : simulates indirect lighting
		MaterialAmbientColor +
		// Diffuse : "color" of the object
		MaterialDiffuseColor * LightColor * LightPower * cosTheta / (distance*distance) +
		// Specular : reflective highlight, like a mirror
		MaterialSpecularColor * LightColor * LightPower * pow(cosAlpha,5) / (distance*distance), 1.0);
}

void main(void)
{
	gl_FragColor = texture2D(Texture2DParameter_DM, uv);
	normal_shader();
	//normal_shader2();
	//normal_shader3();
	//normal_shader4();
    alpha_shader();
}