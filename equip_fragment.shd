#version 150

uniform mat4x4 global_View;
uniform mat4x4 global_Projection;
uniform mat4x4 global_ViewProjection;

uniform vec4 global_ViewInfo; //x = farPlane, y = nearPlane, z = screen width, w = screen height
uniform vec4 global_Data; //x=current time, y=deltatime, z = wind direction X, w = wind direction Z;

uniform vec4   global_ViewPos; // xyz = view pos, w = wind speed
uniform mat4x4 global_LightPropertyMatrix;
uniform mat4x3 global_FogPropertyMatrix;

in vec4 Position0;
in vec2 TexCoord0;
in vec3 TexCoord1;
in vec3 TexCoord2;
in vec3 TexCoord3;
in vec3 WorldTangent;
in vec3 WorldView;
in float HeightFog;
in float DistanceFog;

out vec4 outColor0;

uniform float _OpacityFade;
//uniform sampler2D _SSAOSampler;
//uniform sampler2D _ShadowSampler;
//uniform vec4 _ShadowsAndSSAOParams;
uniform vec4 Vector4Parameter_Color;
uniform sampler2D Texture2DParameter_DM;
uniform float FloatParameter_GlowMultiploer;
uniform sampler2D Texture2DParameter_NM;
uniform float FloatParameter_Gloss;
uniform sampler2D Texture2DParameter_SM;
uniform float FloatParameter_SpecularMultiplier;

void CalculateMatEmissive(vec2 in_0,
	vec3 in_1,
	out vec3 out_0)
{
	vec3 Local0 = Vector4Parameter_Color.xyz;
	vec4 Local1 = texture(Texture2DParameter_DM, in_0);
	//[Local1] Get needed components
	vec3 Local2 = Local1.xyz;
	float Local3 = Local1.w;
	vec3 Local4 = (Local0 * Local3);
	float Local5 = in_1.x;
	float Local6 = (Local5 * 5.0f);
	float Local7 = (5.1f * global_Data.x);
	float Local8 = (Local6 + Local7);
	float Local9 = ((((sin(Local8) * 0.5f) + 0.5f) * (1.0f - 0.3f)) + 0.3f);
	float Local10 = (3.5f * global_Data.x);
	float Local11 = (Local6 + Local10);
	float Local12 = ((((sin(Local11) * 0.5f) + 0.5f) * (1.0f - 0.3f)) + 0.3f);
	float Local13 = (Local9 + Local12);
	float Local14 = (Local13 / 2.0f);
	float Local15 = (FloatParameter_GlowMultiploer * Local14);
	vec3 Local16 = (Local4 * Local15);
	out_0 = Local16;
}

void CalculateMatNormal(vec2 in_0,
	out vec3 out_0)
{
	vec4 Local0 = texture(Texture2DParameter_NM, in_0);
	//[Local0] Convert normalmaps to tangent space vectors
	Local0.xyzw = Local0.wzyx;
	Local0.xyz = ((Local0.xyz * 2.0f) - 1.0f);
	Local0.z = -(Local0.z);
	Local0.xyz = normalize(Local0.xyz);
	//[Local0] Get needed components
	vec3 Local1 = Local0.xyz;
	out_0 = Local1;
}

void CalculateMatDiffuse(vec2 in_0,
	out vec3 out_0)
{
	vec4 Local0 = texture(Texture2DParameter_DM, in_0);
	//[Local0] Get needed components
	vec3 Local1 = Local0.xyz;
	float Local2 = Local0.w;
	vec3 Local3 = Vector4Parameter_Color.xyz;
	vec3 Local4 = (Local3 * Local2);
	vec3 Local5 = mix(Local1, Local4, vec3(Local2, Local2, Local2));
	out_0 = Local5;
}

void CalculateDirLightDiffuse(vec3 in_0,
	vec3 in_1,
	out vec3 out_0)
{
	out_0 = in_1;

	vec3 lightVector = global_LightPropertyMatrix[0].xyz;
	vec3 lightDiffuse = global_LightPropertyMatrix[2].xyz;

	float intensity = clamp(dot(normalize(lightVector), in_0), 0, 1);

	out_0 = (out_0 + (lightDiffuse * intensity));
}

void CalculateMatSpecularPower(out float out_0)
{
	out_0 = FloatParameter_Gloss;
}

void CalculateMatSpecular(vec2 in_0,
	out vec3 out_0)
{
	vec4 Local0 = texture(Texture2DParameter_SM, in_0);
	//[Local0] Get needed components
	vec3 Local1 = Local0.xyz;
	vec3 Local2 = (Local1 * FloatParameter_SpecularMultiplier);
	vec3 Local3 = Vector4Parameter_Color.xyz;
	vec4 Local4 = texture(Texture2DParameter_DM, in_0);
	//[Local4] Get needed components
	vec3 Local5 = Local4.xyz;
	float Local6 = Local4.w;
	vec3 Local7 = (Local3 * Local6);
	vec3 Local8 = mix(Local2, Local7, vec3(Local6, Local6, Local6));
	out_0 = Local8;
}

void CalculateDirLightSpecular(vec3 in_0,
	vec3 in_1,
	float in_2,
	vec3 in_3,
	out vec3 out_0)
{
	out_0 = in_3;

	vec3 lightVector = global_LightPropertyMatrix[0].xyz;
	vec3 lightSpecular = global_LightPropertyMatrix[3].xyz;

	float specularIntensity = 0.0f;
	vec3 halfVector = normalize((in_1 + normalize(lightVector)));
	specularIntensity = dot(halfVector, in_0);
	specularIntensity = pow(specularIntensity, in_2);
	specularIntensity = (specularIntensity * clamp((dot(in_0, normalize(lightVector)) * 4.0f), 0, 1));

	out_0 = (out_0 + (lightSpecular * specularIntensity));
}

void main()
{
	vec3 FinalColor = vec3(0.0f, 0.0f, 0.0f);

	//UV position
	vec2 Local0 = (gl_FragCoord.xy / global_ViewInfo.zw);

	//float ssao = texture(_SSAOSampler, Local0).x;
	//float shadow = texture(_ShadowSampler, Local0).x;
	vec3 matEmissive;
	CalculateMatEmissive(TexCoord0, TexCoord1, matEmissive);
	FinalColor = (FinalColor + matEmissive);

	vec3 matNormal;
	CalculateMatNormal(TexCoord0, matNormal);
	//Normalize World Normal
	vec3 worldNormalNormalized = normalize(TexCoord2);

	//Normalize World Binormal
	vec3 worldBinormalNormalized = normalize(TexCoord3);

	//Normalize World Tangent
	vec3 worldTangentNormalized = normalize(WorldTangent);

	mat3x3 NBT = mat3x3(vec3(worldTangentNormalized.x, worldNormalNormalized.x, worldBinormalNormalized.x), vec3(worldTangentNormalized.y, worldNormalNormalized.y, worldBinormalNormalized.y), vec3(worldTangentNormalized.z, worldNormalNormalized.z, worldBinormalNormalized.z));

	matNormal = normalize((matNormal * NBT));

	vec3 matDiffuse;
	CalculateMatDiffuse(TexCoord0, matDiffuse);
	//Calculate Light Diffuse
	vec3 dirLightDiffuse = vec3(0.0f, 0.0f, 0.0f);
	CalculateDirLightDiffuse(matNormal, dirLightDiffuse, dirLightDiffuse);
	//dirLightDiffuse = (dirLightDiffuse * mix(1.0f, ssao, (_ShadowsAndSSAOParams.y * _ShadowsAndSSAOParams.x)));
	//dirLightDiffuse = mix(dirLightDiffuse, (dirLightDiffuse * shadow), vec3(_ShadowsAndSSAOParams.w, _ShadowsAndSSAOParams.w, _ShadowsAndSSAOParams.w));
	vec3 ambientSkyLightDiffuse = global_LightPropertyMatrix[1].xyz;
	vec3 ambientGroundLightDiffuse = vec3(global_LightPropertyMatrix[0].w, global_LightPropertyMatrix[1].w, global_LightPropertyMatrix[2].w);
	vec3 ambientLightDiffuse = mix(ambientGroundLightDiffuse, ambientSkyLightDiffuse, vec3(((TexCoord2.y * 0.5f) + 0.5f), ((TexCoord2.y * 0.5f) + 0.5f), ((TexCoord2.y * 0.5f) + 0.5f)));
	//ambientLightDiffuse = (ambientLightDiffuse * mix(1.0f, ssao, (_ShadowsAndSSAOParams.z * _ShadowsAndSSAOParams.x)));
	vec3 lightDiffuse = (dirLightDiffuse + ambientLightDiffuse);
	//Calculate Final Diffuse
	vec3 FinalDiffuse;
	FinalDiffuse = (matDiffuse * lightDiffuse);
	//Add Final Diffuse to FinalColor
	FinalColor = (FinalColor + FinalDiffuse);

	float matSpecularPower;
	CalculateMatSpecularPower(matSpecularPower);
	vec3 matSpecular;
	CalculateMatSpecular(TexCoord0, matSpecular);
	//Calculate Final Specular
	//Normalized world space view vector
	vec3 worldViewNormalized = normalize(WorldView);

	vec3 dirLightSpecular = vec3(0.0f, 0.0f, 0.0f);
	CalculateDirLightSpecular(matNormal, worldViewNormalized, matSpecularPower, dirLightSpecular, dirLightSpecular);
	//dirLightSpecular = (dirLightSpecular * mix(1.0f, ssao, (_ShadowsAndSSAOParams.y * _ShadowsAndSSAOParams.x)));
	//dirLightSpecular = mix(dirLightSpecular, (dirLightSpecular * shadow), vec3(_ShadowsAndSSAOParams.w, _ShadowsAndSSAOParams.w, _ShadowsAndSSAOParams.w));
	vec3 FinalSpecular;
	FinalSpecular = (matSpecular * dirLightSpecular);
	FinalColor = (FinalColor + FinalSpecular);

	//FinalColor = mix(global_FogPropertyMatrix[1], FinalColor, vec3(HeightFog, HeightFog, HeightFog));
	//FinalColor = mix(global_FogPropertyMatrix[0], FinalColor, vec3(DistanceFog, DistanceFog, DistanceFog));

	outColor0 = vec4(FinalColor, _OpacityFade);
	outColor0 = max(outColor0, 0.0f);
}
