#version 110

attribute vec3 inPosition0;
attribute vec3 inNormal0;
attribute vec2 inTexCoord0;
attribute vec3 inTangent0;
attribute vec3 inBinormal0;

uniform mat4 WorldMatrix;
uniform mat4 global_ModelView;
uniform mat4 global_Projection;

varying vec3 vTangent;
varying vec3 vBinormal;
varying vec2 uv;
varying vec3 n;

varying vec3 Position_cameraspace;
varying vec3 EyeDirection_cameraspace;
varying vec3 LightDirection_cameraspace;

varying vec3 LightDirection_inTangent0space;
varying vec3 EyeDirection_inTangent0space;

void main(void) {
	//mat3 normalMatrix = mat3(transpose(inverse(global_ModelView)));
	gl_Position = global_Projection * global_ModelView * vec4(inPosition0, 1.0);
	uv = inTexCoord0;
	//n = normalize(normalMatrix * inNormal0);
	
	Position_cameraspace = (global_ModelView * vec4(inPosition0,1)).xyz;
	
	// Vector that goes from the inPosition0 to the camera, in camera space.
	// In camera space, the camera is at the origin (0,0,0).
	vec3 inPosition0Position_cameraspace = ( global_ModelView * vec4(inPosition0,1)).xyz;
	EyeDirection_cameraspace = vec3(0.0,0.0,0.0) - inPosition0Position_cameraspace;
	
	// model to camera = ModelView
	//vec3 inPosition0inTangent0_cameraspace = mat3(global_ModelView) * inTangent0;
	//vec3 inPosition0BiinTangent0_cameraspace = mat3(global_ModelView) * inBinormal0;
	//vec3 inPosition0Normal_cameraspace = mat3(global_ModelView) * inNormal0;
	
	//mat3 TBN = transpose(mat3(
	//	inPosition0inTangent0_cameraspace,
	//	inPosition0BiinTangent0_cameraspace,
	//	inPosition0Normal_cameraspace	
	//)); // You can use dot products instead of building this matrix and transposing it. See References for details.

	//LightDirection_inTangent0space = TBN * LightDirection_cameraspace;
	//EyeDirection_inTangent0space =  TBN * EyeDirection_cameraspace;
}
